(defun rails-calculate-file-type ()
  "File type for current buffer."
  (interactive)
  ;; TODO: make filename relative to root of project
  (if (buffer-file-name)
      (let ((filename (buffer-file-name))
            (extension (file-name-extension (buffer-file-name))))
        (cond
         ((or
           (string-match-p "\\<_controller\.rb$" filename)
           (string-match-p "\\<app/controllers/.*\.rb$" filename))
          "controller")
         ((string-match-p "\\<test/test_helper\.rb$" filename)
          "test")
         ((string-match-p "\\<spec/spec_helper\.rb$" filename)
          "spec")
         ((string-match-p "\\<app/models/.*\.rb" filename)
          "model")
         ((string-match-p "\\<test/unit/.*_test\.rb$" filename)
          "test-unit")
         ((string-match-p "\\<test/functional/.*_test\.rb$" filename)
          "test-functional")
         ((string-match-p "\\<test/integration/.*_test\.rb$" filename)
          "test-integration")
         ((string-match-p "\\<lib/.*\.rb$" filename)
          "lib")
         ((string-match-p "\\<app/views/layouts\\>.*\." filename)
          "view-layout")
         ((string-match-p "\\<app/views/.*/_.*\." filename)
          "view-partial")
         ((string-match-p "\\<app/views\\>.*\." filename)
          "view")
         ((string-match-p "\\<db/migrate\\>" filename)
          "db-migration")
         ((string-match-p "\\<db/schema\.rb$" filename)
          "db-schema")
         ((or
           (string-equal "css" extension)
           (string-equal "less" extension)
           (string-match-p "s\[ac\]ss" extension))
          "stylesheet")
         ((string-equal "js" extension)
          "javascript")
         ((string-equal "coffee" extension)
          "javascript-coffee")
         ((string-equal "html" extension)
          "html")
         ((string-match-p "\\<config/routes\\>.*\.rb$" filename)
          "config-routes")
         ((string-match-p "\\<config/" filename)
          "config")))))
